package org.example.enums;

import java.util.Arrays;

public enum OdTypeEnum {
    SCM(0, "SCM REINTEGRATION"),
    MIXED_CHARGES(1, "CHARGES MIXTES REINTEGRATION"),
    FREE(2, "OD LIBRE REINTEGRATION"),
    MEAL_ALONE(3, "REPAS PRIS SEUL REINTEGRATION"),
    PREENTRY(4, "PREENTRY REINTEGRATION"),
    IK(5, "INDEMNITE KILOMETRIQUE REINTEGRATION"),
    IMMOBILIZATION_EXCESS_AMORTIZATION(6, "AMORTISSEMENT EXCEDENTAIRE"),
    ACCOUNTING_IMMOBILIZATION_AMORTIZATION(7, "CURRENTLY UNUSED"),
    IMMOBILIZATION_DOTATION_AMORTIZATION(8, "DOTATION AMORTISSEMENT"),
    IMMOBILIZATION_CUMULATED_AMORTIZATION(9, "CUMUL AMORTISSEMENT"),
    MADELIN(10, "MADELIN"),
    VEHICLE_CHARGES(11, "CHARGES DE VEHICULE"),
    PREVIOUS_ACCOUNTING_BALANCE(12, "BALANCE ANTERIEURE"),
    CASH(13, "CAISSE"),
    SCM_PAYMENT(14, "PAIEMENT SCM REINTEGRATION"),
    VEHICLE_FISCAL_PART(15, "REINTEGRATION VEHICLE LEASING"),
    CSG_CRDS(16, "REINTEGRATION CSG NON DEDUCTIBLE"),
    ACCOUNTING_RESULT(17, "AFFECTATION DU RESULTAT"),
    LAUNDRY_CHARGES(18, "FRAIS DE BLANCHISSAGE"),
    F2_DEDUCTION(19, "RECLASSEMENT CHOIX FORFAIT 2%"),
    MIXED_CHARGES_FISCAL(20, "VEHICULE - PART PERSO FISCALE"),
    EXPENSE_FROM_CASH(21, "DEPENSE A PARTIR DE LA CAISSE"),
    INCOME_INTO_CASH(22, "REVENU DANS LA CAISSE"),
    IK_CHOICE(23, "RECLASSEMENT CHOIX IK"),
    CONVENTIONAL_ALLOWANCE(24, "REINTEGRATION ABATTEMENTS CONVENTIONNELS"),
    FISCAL_IMMOBILIZATION_PAYED_AMOUNT(25, "MONTANT IMMOBILISATION PAYE"),
    CLOSE_IMMOBILIZATION(26, "CLOTURE D'IMMOBILISATION"),
    IMMOBILIZATION_ACQUISITION(27, "IMMOBILISATION"),
    EXPENSE_BILL(28, "NOTE DE FRAIS"),
    MODULE_2035_URSSAF(29, "MODULE 2035 URSSAF"),
    MODULE_2035_MEAL_TAKEN_ALONE(30, "MODULE 2035 REPAS PRIS SEULE"),
    MODULE_2035_SCM_SPENDING(31, "MODULE 2035 SCM"),
    MODULE_2035_LEASING_VEHICLES(32, "MODULE 2035 LEASINGS VEHICULES"),
    MODULE_2035_DONATIONS_AND_SPONSORSHIP(33, "MODULE 2035 DONATIONS ET MECENAT"),
    MODULE_2035_F2(34, "MODULE 2035 F2"),
    MODULE_2035_MIXED_CHARGES(35, "MODULE 2035 FRAIS MIXTES"),
    MODULE_2035_IMMO_GAIN_LOSS_SHORT_TERM(36, "MODULE 2035 PLUS OU MOINS VALUE A COURT TERME"),
    MODULE_2035_IMMO_GAIN_LOSS_LONG_TERM(37, "MODULE 2035 PLUS OU MOINS VALUE A LONG TERME"),
    MODULE_2035_DIVERS_DEDUCTION_REINSTATEMENT(38, "MODULE 2035 DEDUCTIONS ET REINTEGRATIONS DIVERSES"),
    MODULE_2035_MADELIN(39, "MODULE 2035 MADELIN"),
    MODULE_2035_F3(40, "MODULE 3% / GROUPE 3 MADELIN"),
    MODULE_2035_PER(41, "MODULE 2035 PER"),
    MODULE_2035_EXEMPTIONS_AND_ALLOWANCES(42, "MODULE 2035 EXONERATIONS ET ABATTEMENTS"),
    MODULE_2035_EXEMPTIONS_AND_ALLOWANCES_NEW_BUSINESS(43, "MODULE 2035 EXONERATIONS ET ABATTEMENTS"),
    MODULE_2035_PERCO(44, "MODULE 2035 PERCO"),
    MODULE_2035_MEDICAL_EXEMPTION(45, "MODULE 2035 EXONERATION MEDECINS"),
    MODULE_2035_BIC(46, "MODULE 2035 BIC"),
    MODULE_2035_DEDUCTION_COVID(47, "MODULE 2035 DEDUCTIONS COVID"),
    VAT_COLLECTED(48, "TVA COLLECTEE"),
    VAT_DEDUCTIBLE(49, "TVA DEDUCTIBLE"),
    VAT_IMMOBILIZATION(50, "TVA SUR IMMOBILISATION"),
    MODULE_VAT_OTHERS_MIXED_CHARGES(51, "MODULE TVA AUTRES FRAIS MIXTES"),
    MODULE_VAT_DEDUCTIBLE_GOODS_AND_SERVICES(52, "MODULE TVA DEDUCTIBLE SUR BIENS ET SERVICES"),
    MODULE_VAT_COLLECTED(53, "MODULE TVA COLLECTE"),
    MODULE_VAT_ON_IMMOBILIZATION(54, "MODULE DE TVA SUR IMMOBILISATIONS"),
    VAT_IMMOBILIZATION_PAYED(55, "TVA PAYEE SUR IMMOBILISATION"),
    MODULE_2035_CNBF(56, "MODULE 2035 CNBF"),
    MODULE_VAT_SUMMARY(57, "MODULE DE TVA SYNTHESE"),
    MODULE_VAT_DEPOSIT_JULY(58, "MODULE DE TVA ACOMPTE DECEMBRE"),
    MODULE_VAT_DEPOSIT_DECEMBER(59, "MODULE DE TVA ACOMPTE JUILLET"),
    MODULE_VAT_SUMMARY_IMMOBILISATION(58, "MODULE DE TVA SYNTHESE IMMOBILISATION"),
    MODULE_2035_ACCOUNTING_FEES_TAX_CREDIT(59, "MODULE 2035 CREDIT D'IMPOT FRAIS DE TENUE DE COMPTABILITE");

    private Integer id;
    private String label;

    OdTypeEnum(Integer id, String label) {
        this.id = id;
        this.label = label;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public static OdTypeEnum findById(Integer id) {
        return Arrays.stream(values()).filter(value -> id.equals(value.getId())).findFirst().orElse(null);
    }
}

